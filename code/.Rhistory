library(shiny); runApp('Downloads/stream-intermittency-visualization-dashboard-main/SIVD_main.R')
## Copyright (c) Adam N. Price, 2022
## Email: adnprice@ucsc.edu
##
############################# Description ##########################
##
## Code to extract rewetting events at different flow thresholds
##   22-02-25: Current threholds are Q5,10,15,25,50, and peaks after
##             those thresholds are met
##
############################# Packages #############################
library(parallel)
library(lubridate)
library(tidyverse)
library(dataRetrieval)
# Load wetting date data
wetEvents = read_csv("data/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
setwd("~/Google Drive/My Drive/12_subprojects/wettingRegimes_code/code")
# Load wetting date data
wetEvents = read_csv("data/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
setwd("~/Google Drive/My Drive/12_subprojects/wettingRegimes_code/code")
setwd("~/Google Drive/My Drive/12_subprojects/wettingRegimes_code")
# Load wetting date data
wetEvents = read_csv("data/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
# Load wetting date data
wetEvents = read_csv("data/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
# Load wetting date data
wetEvents = read_csv("./data/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
setwd("~/Google Drive/My Drive/12_subprojects/wettingRegimes_code/code")
# Load wetting date data
wetEvents = read_csv("data/wettingRegimes_wettingLengths.csv") %>%
na.omit()
View(wetEvents)
library(ggplot2)
library(tidyverse)
library(ggridges)
library(ggridges)
dat = read_csv("data/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
dat = read_csv("data/archive/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
dat = read_csv("data/zz_archive/wettingRegimes_wettingLengths_Peaks.csv") %>%
na.omit()
View(dat)
##
## Copyright (c) Adam N. Price, 2022
## Email: adnprice@ucsc.edu
##
############################# Description ##########################
##
## Test code for streamgage 11149400 to pick peaks and calculate metrics
##
##
############################# Packages #############################
library(tidyverse)
library(ggplot2)
## Load data
wetEvents = read_csv("data/wettingRegimes_wettingLengths.csv") %>%
na.omit()
## Get a random sample of events
set.seed(42)
wetEvents = wetEvents %>%
group_by(gage) %>%
slice_sample(n=1)
## Select gage 11149400
n = which(wetEvents$gage==11149400)
## Download UV data from NWIS for that wetting event
siteNumber = str_pad(wetEvents$gage[n], 8, pad = "0")
parameterCd = "00060"
startDate = wetEvents$wet_date[n]-1
endDate = wetEvents$wetLengthDate[n]
dat = dataRetrieval::readNWISuv(
siteNumber,
parameterCd,
startDate,
endDate
)
View(dat)
#### Plot the data
p <- ggplot(data = dat) +
geom_line(aes(x = dateTime,
# y = round(X_00060_00000,1)),
y = q_peak),
alpha = 0.5)+
# scale_y_continuous(trans='log10') +
theme_classic()+
xlab("Date")+
ylab("Discharge (cfs)")
p
View(dat)
typeof(dat$dateTime)
dat$dateTime = lubridate::as_datetime(dat$dateTime)
View(dat)
#### Plot the data
ggplot(data = dat) +
geom_line(aes(x = dateTime,
y = X_00060_00000),
alpha = 0.5)+
# scale_y_continuous(trans='log10') +
theme_classic()+
xlab("Date")+
ylab("Discharge (cfs)")
install.packages("hydroEvents")
library(hydroEvents)
limbs(data = dat$X_00060_00000, dates = NULL, events = BF_res, main = "with 'eventBaseflow'")
limbs(data = dat$X_00060_00000, dates = NULL, main = "with 'eventBaseflow'")
### Event picker
BF_res = eventBaseflow(dat$X_00060_00000)
limbs(data = dat$X_00060_00000, dates = NULL, events = BF_res, main = "with 'eventBaseflow'")
dataBassRiver
BF_res
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 10, delta.x = 1, threshold = 0)
plotEvents(data = dataBassRiver, events = Max_res, ymax = 1160, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
View(Max_res)
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 10, delta.x = 1, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, ymax = 1160, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
WQ_Q
### Event picker
BF_res = eventBaseflow(dat$X_00060_00000)
warnings()
View(BF_res)
limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = BF_res, main = "with 'eventBaseflow'")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 10, delta.x = 1, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
Max_res = eventMinima(data = dat$X_00060_00000, delta.y = 10, delta.x = 1, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 10, delta.x = 1, threshold = 0)
limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 1, delta.x = 1, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 5, delta.x = 1, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 0, delta.x = 1, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 1, delta.x = 10, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 1, delta.x = 5, threshold = 0)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 1, delta.x = 1, threshold = 0)
Max_res = eventMaxima(data = dat$X_00060_00000, delta.y = 1, delta.x = 1, threshold = 0.1)
plotEvents(data = dat$X_00060_00000, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
View(p)
View(p)
dat
View(dat)
dat$Q = round(dat$X_00060_00000)
View(dat)
dat$Q = round(dat$X_00060_00000,2)
dat$Q = round(dat$X_00060_00000,1)
### Event picker
Max_res = eventMaxima(data = dat$dat$Q, delta.y = 1, delta.x = 1, threshold = 0.1)
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
quantile(dat$X_00060_00000)
percentile(dat$X_00060_00000)
quantile(dat$X_00060_00000,.25)
### Event picker
Max_res = eventMaxima(data = dat$dat$Q, delta.y = 1, delta.x = 1, threshold = quantile(dat$X_00060_00000,.25))
### Event picker
Max_res = eventMaxima(data = dat$dat$Q, delta.y = 1, delta.x = 1, threshold = quantile(dat$X_00060_00000,.25))quantile(dat$X_00060_00000,.25)
quantile(dat$X_00060_00000,.25)
quantile(dat$X_00060_00000,.25)[1]
quantile(dat$X_00060_00000,.25)[[1]]
### Event picker
Max_res = eventMaxima(data = dat$dat$Q, delta.y = 1, delta.x = 1, threshold = quantile(dat$X_00060_00000,.25)[[1]])
### Event picker
Max_res = eventMaxima(data = dat$dat$Q, delta.y = 1, delta.x = 1, threshold = 2.2)
0.1
### Event picker
Max_res = eventMaxima(data = dat$dat$Q, delta.y = 1, delta.x = 1, threshold = 0.1)
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = quantile(dat$X_00060_00000,.25))
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = 2.2)
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = quantile(dat$X_00060_00000,.5))
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
quantile(dat$X_00060_00000)
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = quantile(dat$X_00060_00000,.95))
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
wetEvents$wet_date[n]
View(dat)
## Select gage 11149400
n = which(wetEvents$gage==06404998)
## Download UV data from NWIS for that wetting event
siteNumber = str_pad(wetEvents$gage[n], 8, pad = "0")
parameterCd = "00060"
startDate = wetEvents$wet_date[n]-1
endDate = wetEvents$wetLengthDate[n]
dat = dataRetrieval::readNWISuv(
siteNumber,
parameterCd,
startDate,
endDate
)
dat$dateTime = lubridate::as_datetime(dat$dateTime)
dat$Q = round(dat$X_00060_00000,1)
#### Plot the data
ggplot(data = dat) +
geom_line(aes(x = dateTime,
y = X_00060_00000),
alpha = 0.5)+
# scale_y_continuous(trans='log10') +
theme_classic()+
xlab("Date")+
ylab("Discharge (cfs)")
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = quantile(dat$X_00060_00000,.95))
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = 0.1)
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 10, delta.x = 1, threshold = 0.1)
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 10, delta.x = 1, threshold = 0.1)
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = 0.1)
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 5, delta.x = 1, threshold = 0.1)
### Event picker
Max_res = eventMaxima(data = dat$Q, delta.y = 0, delta.x = 1, threshold = 0.1)
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
### Event picker
BF_res = eventBaseflow(dat$Q)
### Event picker
Max_res = eventBaseflow(dat$Q)
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = 0.1)
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
#### Plot the data
ggplot(data = dat) +
geom_line(aes(x = dateTime,
y = dat$Q),
alpha = 0.5)+
# scale_y_continuous(trans='log10') +
theme_classic()+
xlab("Date")+
ylab("Discharge (cfs)")
Max_res = eventMaxima(data = dat$Q, delta.y = 1, delta.x = 1, threshold = 0.1)
plotEvents(data = dat$Q, events = Max_res, xlab = "Index", ylab = "Flow (ML/day)", colpnt = "#E41A1C", colline = "#377EB8", main = "eventMaxima")
p = limbs(data = dat$X_00060_00000, dates = dat$dateTime, events = Max_res, main = "with 'eventBaseflow'")
setwd("~/Google Drive/My Drive/01_FoAF/Project_Files/01_ModeledFlows/03_analysis/code")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Step 1: Setup workspace -------------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Clear Memory
remove(list=ls())
#open libraries of interest
library(tidyverse)
library(lubridate)
library(ncdf4)
library(nhdplusTools)
library(sf)
library(parallel)
library(dataRetrieval)
#Create function to download flow data based on date, lat, and long
nwm_data<-function(date, lat, long, crs){
#Idnetify NHDPlus COMID
comid <- st_point(c(lat, long)) %>%
st_sfc(., crs=crs) %>%
discover_nhdplus_id(.)
#Identify web and local directory locations
date_text<-date %>% format(., "%Y%m%d") %>% paste0(., "1200")
year_text <- year(date)
web_text<-paste0("https://noaa-nwm-retrospective-2-1-pds.s3.amazonaws.com/model_output/",
year_text, "/",date_text,".CHRTOUT_DOMAIN1.comp")
dir_text<-paste0("data/",date_text,".CHRTOUT_DOMAIN1.comp")
#Download flow data from the web
download.file(web_text, dir_text, method ='libcurl', mode='wb')
#oPEN NET Cdf
nc<-nc_open(dir_text)
#Extrract Streamflow
df<-tibble(
reach_id = ncvar_get(nc, "feature_id"),
streamflow_cms = ncvar_get(nc, "streamflow"))
#remove file
nc_close(nc)
file.remove(dir_text)
#Filter based on comid
df<-df %>%
filter(reach_id %in% comid) %>%
mutate(date=date)
#Export file
df
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Step 3: Apply Download Function -----------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#create date input
dates<-seq(ymd('1999-10-01'),ymd('2000-09-30'), by = '1 day')
#create wrapper fun
fun<-function(n){
tryCatch(
nwm_data(
date = dates[n],
lat = -87.7764022,
long = 33.25706249,
crs = 4269
),
error = function(e) tibble(reach_id  = NA, streamflow_cms =NA, date = dates[n]))
}
#Prep Clusters
n.cores<-detectCores()-1
cl<-makeCluster(n.cores)
clusterEvalQ(cl, {
library(tidyverse)
library(lubridate)
library(ncdf4)
library(nhdplusTools)
library(sf)
})
clusterExport(cl, c("nwm_data", "dates"))
#Run in parallel
output<-parLapply(cl,seq(1, length(dates)),fun)
#Now, bind rows from list output
output<-output %>% bind_rows()
#Stop the clusters
stopCluster(cl)
View(output)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Step 4: Compare to USGS data --------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Download USGS Data
df<-readNWISdv(siteNumbers = '02446500',
parameterCd = '00060',
startDate = '1999-10-01',
endDate = '2000-09-30')
#Tidy Data
df<-df %>%
select(date = Date,
flow = X_00060_00003) %>%
mutate(date = ymd(date),
nwis_flow_cms = 0.0283168*flow) %>%
select(date, nwis_flow_cms)
#Combine without output
output<- output %>% rename(nwm_flow_cms = streamflow_cms) %>% select(date, nwm_flow_cms)
df<-left_join(df, output) %>% as_tibble()
#plot
df %>%
ggplot()+
geom_line(aes(x=date,y=nwis_flow_cms), col="blue", lwd=1.2) +
geom_line(aes(x=date,y=nwm_flow_cms), col="red", lwd=1.2) +
#Plot y-axis in log scale
scale_y_log10() +
#Add predefined black/white theme
theme_bw() +
#Change font size of axes
theme(
axis.title = element_text(size = 14),
axis.text  = element_text(size = 10)
) +
#Add labels
xlab(NULL) +
ylab("Flow [cfs]")
library(dataRetrieval)
dataRetrieval::findNLDI(nwis="12115700")
dataRetrieval::findNLDI(nwis="13152500")
dat = read.csv('../data/PNW_DryingRegimeGages.csv')
View(dat)
tt = dataRetrieval::findNLDI(nwis=dat$gage)
tt = dataRetrieval::findNLDI(nwis=str(dat$gage))
dat$gage
str(dat$gage)
tt = dataRetrieval::findNLDI(nwis=paste0('"',str(dat$gage),'"')
tt = dataRetrieval::findNLDI(nwis=paste0('"',str(dat$gage),'"'))
tt = dataRetrieval::findNLDI(nwis=paste0('"',str(dat$gage),'"'))
